/*
 * This file is part of lamp, licensed under the MIT License.
 *
 *  Copyright (c) Revxrsal <reflxction.github@gmail.com>
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */
package revxrsal.commands.command;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import revxrsal.commands.annotation.Default;
import revxrsal.commands.annotation.Named;
import revxrsal.commands.annotation.Optional;
import revxrsal.commands.annotation.Sized;
import revxrsal.commands.annotation.list.AnnotationList;
import revxrsal.commands.node.ParameterNamingStrategy;

import java.lang.annotation.Annotation;
import java.lang.reflect.Method;
import java.lang.reflect.Parameter;
import java.lang.reflect.Type;
import java.util.List;

/**
 * Represents a parameter in a command. This corresponds to a
 * reflection {@link Parameter}.
 */
public interface CommandParameter {

    /**
     * Returns the name of the parameter. Note that this may not
     * always be equal to the name of the underlying parameter,
     * as it could be generated by a {@link ParameterNamingStrategy}
     * or overridden explicitly using {@link Named @Named}
     *
     * @return The parameter name
     */
    @NotNull
    String name();

    /**
     * Returns the index of this parameter in the method.
     *
     * @return The index of this parameter in the method.
     */
    int methodIndex();

    /**
     * Tests whether is this parameter the last in the method or not
     *
     * @return If this parameter is the last
     */
    boolean isLastInMethod();

    /**
     * Returns the underlying {@link Parameter}
     *
     * @return The underlying parameter
     */
    @NotNull Parameter parameter();

    /**
     * Returns the method associated with this parameter.
     *
     * @return The method associated with this parameter.
     */
    @NotNull Method method();

    /**
     * Returns the list of annotations present on this parameter.
     *
     * @return A list of annotations present on this parameter.
     */
    @NotNull AnnotationList annotations();

    /**
     * Returns the raw class type of the parameter.
     *
     * @return The raw class type of the parameter.
     */
    @NotNull Class<?> type();

    /**
     * Returns the full type of the parameter, including generics.
     *
     * @return The full type of the parameter.
     */
    @NotNull Type fullType();

    /**
     * Returns a list of generic types associated with this parameter.
     * <p>
     * If this parameter is not parameterized, this will be an empty
     * list.
     *
     * @return A list of generic types associated with this parameter.
     */
    @NotNull List<Type> generics();

    /**
     * Tests whether is this parameter optional or not.
     * <p>
     * This will return true in these cases:
     * <ol>
     *     <li>It is marked with {@link Optional @Optional}</li>
     *     <li>It has a default value from {@link Default @Default}</li>
     *     <li>It has {@link Sized @Sized} with {@code min()} == 0</li>
     * </ol>
     *
     * @return if this parameter is optional
     */
    boolean isOptional();

    /**
     * Tests whether this parameter has the given annotation or not
     *
     * @param annotationType The annotation type to check for
     * @return {@code true} if the annotation is present, {@code false} if otherwise.
     */
    default boolean hasAnnotation(@NotNull Class<? extends Annotation> annotationType) {
        return annotations().contains(annotationType);
    }

    /**
     * Returns the given annotation, or {@code null} if it's not annotated
     * with the given annotation (or distributed on, indirectly)
     *
     * @param type The annotation type
     * @param <T>  The annotation type automatically cast
     * @return The annotation instance, or {@code null} if not
     * present
     */
    default <T extends Annotation> @Nullable T getAnnotation(@NotNull Class<T> type) {
        return annotations().get(type);
    }
}

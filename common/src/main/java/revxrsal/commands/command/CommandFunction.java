/*
 * This file is part of lamp, licensed under the MIT License.
 *
 *  Copyright (c) Revxrsal <reflxction.github@gmail.com>
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */
package revxrsal.commands.command;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.Unmodifiable;
import revxrsal.commands.Lamp;
import revxrsal.commands.annotation.Named;
import revxrsal.commands.annotation.list.AnnotationList;
import revxrsal.commands.node.ParameterNamingStrategy;
import revxrsal.commands.reflect.MethodCaller.BoundMethodCaller;
import revxrsal.commands.response.ResponseHandler;

import java.lang.annotation.Annotation;
import java.lang.reflect.Method;
import java.lang.reflect.Parameter;
import java.util.Map;
import java.util.NoSuchElementException;

/**
 * Represents a function that contains an executable command. This
 * corresponds to a reflection {@link Method}.
 */
public interface CommandFunction {

    /**
     * Returns the Lamp instance that created this function.
     *
     * @return The lamp instance
     */
    <A extends CommandActor> Lamp<A> lamp();

    /**
     * Returns the function name
     *
     * @return The function name
     */
    @NotNull
    String name();

    /**
     * Returns the annotations on the function
     *
     * @return The function annotations
     */
    @NotNull
    AnnotationList annotations();

    /**
     * Returns the underlying {@link Method} of this function
     *
     * @return The method
     */
    @NotNull
    Method method();

    /**
     * Returns an unmodifiable map of the parameters this function contains.
     * <p>
     * Note that the names are the ones generated by {@link ParameterNamingStrategy}
     * or explicitly set with {@link Named}, and not {@link Parameter#getName()}.
     *
     * @return A map of the parameters by their names
     */
    @NotNull
    @Unmodifiable
    Map<String, CommandParameter> parametersByName();

    /**
     * Returns the {@link CommandParameter} that has a given name, otherwise
     * throws an error.
     *
     * @param name Name of the parameter
     * @return The parameter
     * @throws NoSuchElementException if no such parameter exists
     */
    @NotNull
    CommandParameter parameter(String name);

    /**
     * Returns a wrapper that allows to easily invoke the method with its parameters
     * directly.
     *
     * @return The method caller
     */
    @NotNull
    BoundMethodCaller caller();

    /**
     * Calls the function with the given arguments
     *
     * @param arguments Arguments to invoke with
     * @param <T>       The function return type
     * @return The function return result
     */
    <T> T call(@NotNull Object... arguments);

    /**
     * Returns the response handler for this function
     *
     * @param <T> The response type
     * @return The response handler
     */
    @NotNull <T> ResponseHandler<?, T> responseHandler();

    /**
     * Tests whether the function has the specified annotation
     *
     * @param annotationType Annotation to check for
     * @return whether the function has the given annotation or not
     */
    default boolean hasAnnotation(@NotNull Class<? extends Annotation> annotationType) {
        return annotations().contains(annotationType);
    }

    /**
     * Returns the annotation on the function
     *
     * @param type Annotation to check for
     * @return The annotation value, or {@code null} if it's not present.
     */
    default <T extends Annotation> @Nullable T getAnnotation(@NotNull Class<T> type) {
        return annotations().get(type);
    }
}
